<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:cxf="http://camel.apache.org/schema/cxf" xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-2.12.3.xsd
                        http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.12.3.xsd
                        http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd">

  <!-- use the default HostnameVerifier to work around SNI bug in OpenJDK 1.8 -->
  <http:conduit name="*.http-conduit">
    <http:tlsClientParameters useHttpsURLConnectionDefaultHostnameVerifier="true" />
  </http:conduit>

  <!-- CXF RS beans -->
  <cxf:rsServer id="globalRegistryRedirector" address="${url.servicemix:}/globalregistry"
      serviceClass="org.ccci.gto.servicemix.globalreg.jaxrs.api.WildcardEndpoint" loggingFeatureEnabled="false" />
  <cxf:rsClient id="singleBestRecord" address="${uri.sbr}"
      serviceClass="org.ccci.gto.servicemix.globalreg.jaxrs.api.WildcardEndpoint" loggingFeatureEnabled="false" />
  <cxf:rsClient id="globalRegistry" address="${uri.backend}"
      serviceClass="org.ccci.gto.servicemix.globalreg.jaxrs.api.WildcardEndpoint" loggingFeatureEnabled="false" />

  <bean id="processQuery" class="org.ccci.gto.servicemix.globalreg.camel.QueryProcessor" />
  <bean id="forwardingHeaderFilter"
      class="org.ccci.gto.servicemix.globalreg.camel.component.cxf.jaxrs.ForwardingCxfRsHeaderFilterStrategy" />

  <!-- component predicates, these are used for construction of other predicates -->
  <bean id="getEntitiesPredicate" class="org.ccci.gto.servicemix.globalreg.camel.AndPredicate">
    <constructor-arg>
      <list>
        <bean class="org.ccci.gto.servicemix.globalreg.camel.CxfRequestMethodPredicate">
          <property name="methods">
            <set>
              <value>GET</value>
            </set>
          </property>
        </bean>
        <bean class="org.ccci.gto.servicemix.globalreg.camel.CxfRequestTypePredicate">
          <property name="types">
            <set>
              <value>entities</value>
            </set>
          </property>
        </bean>
      </list>
    </constructor-arg>
  </bean>

  <!-- Any request to the /rules or /ruleset type endpoints -->
  <bean id="sbrResourcePredicate" class="org.ccci.gto.servicemix.globalreg.camel.CxfRequestTypePredicate">
    <property name="types">
      <set>
        <value>rules</value>
        <value>ruleset</value>
      </set>
    </property>
  </bean>

  <!-- GET requests to /entities w/ a ruleset parameter -->
  <bean id="sbrRulesetPredicate" class="org.ccci.gto.servicemix.globalreg.camel.AndPredicate">
    <constructor-arg>
      <list>
        <ref local="getEntitiesPredicate" />
        <bean class="org.ccci.gto.servicemix.globalreg.camel.CxfRequestQueryParamsPredicate">
          <property name="params">
            <set>
              <value>ruleset</value>
            </set>
          </property>
        </bean>
      </list>
    </constructor-arg>
  </bean>

  <!-- GET requests to /entities w/o an owned_by filter -->
  <bean id="sbrMissingOwnedByPredicate" class="org.ccci.gto.servicemix.globalreg.camel.AndPredicate">
    <constructor-arg>
      <list>
        <ref local="getEntitiesPredicate" />
        <bean class="org.ccci.gto.servicemix.globalreg.camel.NotPredicate">
          <constructor-arg>
            <bean class="org.ccci.gto.servicemix.globalreg.camel.CxfRequestQueryParamsPredicate">
              <property name="params">
                <set>
                  <value>filters[owned_by]</value>
                  <value>filters[owned_by][]</value>
                </set>
              </property>
            </bean>
          </constructor-arg>
        </bean>
      </list>
    </constructor-arg>
  </bean>

  <camel:camelContext>
    <camel:route>
      <camel:from uri="cxfrs:bean:globalRegistryRedirector?throwExceptionOnFailure=false" />
      <camel:process ref="processQuery" />
      <camel:choice>
        <camel:when>
          <camel:method>sbrResourcePredicate</camel:method>
          <camel:to uri="cxfrs:bean:singleBestRecord?throwExceptionOnFailure=false&amp;headerFilterStrategy=#forwardingHeaderFilter" />
        </camel:when>
        <camel:when>
          <camel:method>sbrRulesetPredicate</camel:method>
          <camel:to uri="cxfrs:bean:singleBestRecord?throwExceptionOnFailure=false&amp;headerFilterStrategy=#forwardingHeaderFilter" />
        </camel:when>
        <camel:when>
          <camel:method>sbrMissingOwnedByPredicate</camel:method>
          <camel:to uri="cxfrs:bean:singleBestRecord?throwExceptionOnFailure=false&amp;headerFilterStrategy=#forwardingHeaderFilter" />
        </camel:when>
        <camel:otherwise>
          <camel:to uri="cxfrs:bean:globalRegistry?throwExceptionOnFailure=false&amp;headerFilterStrategy=#forwardingHeaderFilter" />
        </camel:otherwise>
      </camel:choice>
    </camel:route>
  </camel:camelContext>
</beans>
